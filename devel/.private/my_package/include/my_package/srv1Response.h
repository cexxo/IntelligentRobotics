// Generated by gencpp from file my_package/srv1Response.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_SRV1RESPONSE_H
#define MY_PACKAGE_MESSAGE_SRV1RESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <my_package/RVL.h>

namespace my_package
{
template <class ContainerAllocator>
struct srv1Response_
{
  typedef srv1Response_<ContainerAllocator> Type;

  srv1Response_()
    : msg2()
    , robotMessage()  {
    }
  srv1Response_(const ContainerAllocator& _alloc)
    : msg2(_alloc)
    , robotMessage(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _msg2_type;
  _msg2_type msg2;

   typedef  ::my_package::RVL_<ContainerAllocator>  _robotMessage_type;
  _robotMessage_type robotMessage;





  typedef boost::shared_ptr< ::my_package::srv1Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::srv1Response_<ContainerAllocator> const> ConstPtr;

}; // struct srv1Response_

typedef ::my_package::srv1Response_<std::allocator<void> > srv1Response;

typedef boost::shared_ptr< ::my_package::srv1Response > srv1ResponsePtr;
typedef boost::shared_ptr< ::my_package::srv1Response const> srv1ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::srv1Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::srv1Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::srv1Response_<ContainerAllocator1> & lhs, const ::my_package::srv1Response_<ContainerAllocator2> & rhs)
{
  return lhs.msg2 == rhs.msg2 &&
    lhs.robotMessage == rhs.robotMessage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::srv1Response_<ContainerAllocator1> & lhs, const ::my_package::srv1Response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::srv1Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::srv1Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::srv1Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::srv1Response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::srv1Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::srv1Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::srv1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e77b6211ec30c5435a2c270342b1d6e2";
  }

  static const char* value(const ::my_package::srv1Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe77b6211ec30c543ULL;
  static const uint64_t static_value2 = 0x5a2c270342b1d6e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::srv1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/srv1Response";
  }

  static const char* value(const ::my_package::srv1Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::srv1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header msg2\n"
"my_package/RVL robotMessage\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: my_package/RVL\n"
"int32 ID\n"
"string Name\n"
"int32 Level\n"
;
  }

  static const char* value(const ::my_package::srv1Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::srv1Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg2);
      stream.next(m.robotMessage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct srv1Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::srv1Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::srv1Response_<ContainerAllocator>& v)
  {
    s << indent << "msg2: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.msg2);
    s << indent << "robotMessage: ";
    s << std::endl;
    Printer< ::my_package::RVL_<ContainerAllocator> >::stream(s, indent + "  ", v.robotMessage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_SRV1RESPONSE_H
