// Generated by gencpp from file my_package/RVL.msg
// DO NOT EDIT!


#ifndef MY_PACKAGE_MESSAGE_RVL_H
#define MY_PACKAGE_MESSAGE_RVL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_package
{
template <class ContainerAllocator>
struct RVL_
{
  typedef RVL_<ContainerAllocator> Type;

  RVL_()
    : ID(0)
    , Name()
    , Level(0)  {
    }
  RVL_(const ContainerAllocator& _alloc)
    : ID(0)
    , Name(_alloc)
    , Level(0)  {
  (void)_alloc;
    }



   typedef int32_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Name_type;
  _Name_type Name;

   typedef int32_t _Level_type;
  _Level_type Level;





  typedef boost::shared_ptr< ::my_package::RVL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_package::RVL_<ContainerAllocator> const> ConstPtr;

}; // struct RVL_

typedef ::my_package::RVL_<std::allocator<void> > RVL;

typedef boost::shared_ptr< ::my_package::RVL > RVLPtr;
typedef boost::shared_ptr< ::my_package::RVL const> RVLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_package::RVL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_package::RVL_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_package::RVL_<ContainerAllocator1> & lhs, const ::my_package::RVL_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.Name == rhs.Name &&
    lhs.Level == rhs.Level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_package::RVL_<ContainerAllocator1> & lhs, const ::my_package::RVL_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_package::RVL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_package::RVL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::RVL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_package::RVL_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::RVL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_package::RVL_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_package::RVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b4ec2aa60da3db4c69006afb31b0c05";
  }

  static const char* value(const ::my_package::RVL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b4ec2aa60da3db4ULL;
  static const uint64_t static_value2 = 0xc69006afb31b0c05ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_package::RVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_package/RVL";
  }

  static const char* value(const ::my_package::RVL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_package::RVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ID\n"
"string Name\n"
"int32 Level\n"
;
  }

  static const char* value(const ::my_package::RVL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_package::RVL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.Name);
      stream.next(m.Level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RVL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_package::RVL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_package::RVL_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "Name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Name);
    s << indent << "Level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PACKAGE_MESSAGE_RVL_H
